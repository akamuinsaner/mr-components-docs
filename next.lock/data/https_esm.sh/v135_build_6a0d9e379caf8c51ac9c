async function i(t,e){const r=t.slice(1);if(e.code.length>100*1024)throw new Error(`esm.sh [${r}] <400> code exceeded limit.`);const o=JSON.stringify(e);if(o.length>1024*1024)throw new Error(`esm.sh [${r}] <400> body exceeded limit.`);const s=await fetch(new URL(t,import.meta.url),{method:"POST",headers:{"Content-Type":"application/json"},body:o});if(!s.ok)throw new Error(`esm.sh [${r}] <${s.status}> ${s.statusText}`);const n=await s.json();if(n.error)throw new Error(`esm.sh [${r}] ${n.error.message}`);return n}function a(t){const e=typeof t=="string"?{code:t}:t;if(!e.code)throw new Error("esm.sh [build] <400> missing code");return i("/build",e)}function g(t){const e=typeof t=="string"?{code:t}:t;if(!e.code)throw new Error("esm.sh [transform] <400> missing code");return Reflect.set(e,"imports",JSON.stringify(e.imports||{})),i("/transform",e)}async function u(t,...e){const r=String.raw({raw:t},...e),o=await c(r);return{...await import(o.url),_build:o}}async function c(t){const e=await d(typeof t=="string"?t:JSON.stringify(t));if(globalThis.localStorage){const o=localStorage.getItem(e);if(o)return JSON.parse(o)}const r=await a(t);return globalThis.localStorage&&localStorage.setItem(e,JSON.stringify(r)),r}async function d(t){return[...new Uint8Array(await crypto.subtle.digest("SHA-1",new TextEncoder().encode(t)))].map(r=>r.toString(16).padStart(2,"0")).join("")}var l=a;export{a as build,l as default,u as esm,g as transform};
